#!/bin/bash

function usage {
    cat <<EOF
Usage: $0 [options] COMMAND [command options]

Options:

    -i <inventory_path>     Specify path to ansible inventory file
    -h                      Show this usage information
    -e <ansible variables>  Set additional variables as key=value or YAML/JSON passed to ansible-playbook
    -v                      Increase verbosity of ansible-playbook
    -p <playbook>           Run the specified playbook file instead of the default one
    -c <configdir>          Use the specified config directory (can also be specified in the shell env as BOSI_CFG)
    -n                      Dry run - make no changes
    -E                      Echo the commands - don't actually run them

Commands:

    requirements            Install requirements

    config                  Run ansible

    env                     Prints the currently-configured environment (inventory/env var)
    ping                    Does an ansible ping (not ICMP) to all hosts
    exec                    Execute arbitrary command on a specified ansible host group
    ssh                     SSH to host using ansible inventory credentials/connection (requires ansible 2.4 or greater)
    list                    List hosts in inventory (requires ansible 2.4 or greater)
    rescan                  Scan SSH host keys into $HOME/.ssh/known_hosts

    help
EOF
}

function bash_completion {
cat <<EOF
-i
-p
-c
-e
-h
-v
requirements
config
ssh
ping
exec
rescan
list
env
help
EOF
}

function choose_config {
  if [ -z "$configdir" ]; then
    if [ ! -f .config ]; then
      echo "Please specify config dir:"
      configdirs=($(ls configs/*/inventory.txt | xargs -L1 dirname))
      numdirs=$(echo "$configdirs" | wc -l)
      select configdir in "${configdirs[@]}" "None of the above"; do
        if [ "$REPLY" -eq "$(($numdirs+1))" ]; then
          echo quit
        elif [ "$REPLY" -le "$numdirs" ]; then
          echo "configdir=$configdir" > .config
        else
          echo "Bad choice, try again"
          continue
        fi
        break
      done
    else
      source .config
    fi
  fi
  if [ -f $configdir/env ]; then source $configdir/env; fi
  inventory=$configdir/inventory.txt
  if [ ! -f "$inventory" ]; then
    echo "ERROR: $f doesn't exist"
    exit 2
  fi
  for f in $configdir/*.json $configdir/*.yml; do
    if [ -f "$f" ]; then
      EXTRA_OPTS="$EXTRA_OPTS -e @$f"
    fi
  done
}

function _ansible_config {
  _config=$(ansible-inventory -i $inventory --host $1 | jq -Mr $2 2>/dev/null)
  if [ $_config != "null" ];  then
    echo $_config
  fi
}

function _ssh {
  local ssh_args=$(_ansible_config $1 .ansible_ssh_common_args)
  local ssh_user=$(_ansible_config $1 .ansible_user)
  local ssh_host=$(_ansible_config $1 .ansible_host)
  shift
  ssh $ssh_args $ssh_user@$ssh_host "$@"
}

VERBOSITY=
PLAYBOOK=ansible/site.yml
ECHO=
EXTRA_OPTS=

SHORT_OPTS=":hi:e:p:c:v?nE"
# The OSX getopt command doesn't support long options
while getopts $SHORT_OPTS optchar; do
case "${optchar}" in

  c)
    configdir=$OPTARG
    ;;

  i)
    INVENTORY="$OPTARG"
    ;;

  e)
    EXTRA_OPTS="$EXTRA_OPTS -e $OPTARG"
    ;;

  h)
    usage
    exit 0
    ;;

  p)
    PLAYBOOK=$OPTARG
    ;;

  v)
    VERBOSITY="$VERBOSITY --verbose"
    set -x
    ;;

  n)
    EXTRA_OPTS="$EXTRA_OPTS --check"
    ;;

  E)
    ECHO=echo
    ;;

  *)
    echo "error"
    exit 3
    ;;
esac
done

shift $((OPTIND-1))
choose_config
export CONFIG_PATH=$(realpath $configdir)

ACTION=$1
shift
case "$ACTION" in

(clean)
  $ECHO rm -f .config
  ;;

(config)
  $ECHO ansible-playbook -i $inventory $EXTRA_OPTS $VERBOSITY -e _action=$ACTION "$@" $PLAYBOOK
  ;;

(requirements)
  $ECHO ansible-galaxy install -r requirements.yml -p ansible/roles-external "$@"
  ;;

(ping)
  $ECHO ansible-playbook -i $inventory $EXTRA_OPTS -e bosi_action=$ACTION $VERBOSITY "$@" ansible/ping.yml
  ;;

(exec)
  ANSIBLE_GROUP=$1
  shift
  $ECHO ansible -i $inventory $ANSIBLE_GROUP -m shell -a "$@"
  ;;

(ssh)
  _ssh "$@"
  ;;

(list)
  ansible-inventory -i $inventory --list | jq -Mr '[._meta.hostvars | to_entries[] | {key: .key, value: .value.ansible_host}] | from_entries'
  ;;

(rescan)
  HOSTS=$(ansible-inventory -i $inventory --list | jq -Mr '._meta.hostvars | .[] | select(has("ansible_host")) | .ansible_host')
  for h in $HOSTS; do
    ssh-keygen -R $h
    a=$(dig +short $h)
    if [ -n "$a" ]; then ssh-keygen -R $a; fi
    ssh-keyscan -t rsa $h >> $HOME/.ssh/known_hosts
  done
  ;;

(env)
  echo -e "$inventory\n--"
  env | grep OS_
  ;;

(bash-completion)
  bash_completion
  exit 0
  ;;

(help)
  usage
  ;;

(*)
  if [ -z "$ACTION" ]; then
    echo -e "ERROR: No command specified\n"
  else
    echo -e "ERROR: '$ACTION' is invalid command\n"
  fi
  usage
  exit 2
  ;;

esac
